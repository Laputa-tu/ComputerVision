#include "hog.h"

using namespace std;
using namespace ClipperLib;

class Classifier::HOGPimpl {
public:

	cv::Mat1f descriptors;
	cv::Mat1f responses;
	
	cv::SVM svm;
	cv::HOGDescriptor hog;
};


/// Constructor
Classifier::Classifier()
{
	HOG = std::shared_ptr<HOGPimpl>(new HOGPimpl());
}

/// Destructor
Classifier::~Classifier() 
{
}

double Classifier::calculateOverlap(ClipperLib::Path labelPolygon, ClipperLib::Path slidingWindow)
{
	ClipperLib::Paths clippedPolygon;
	
	//perform intersection ...
	Clipper c;
	c.AddPath(labelPolygon, ptSubject, true);
	c.AddPath(slidingWindow, ptClip, true);
	c.Execute(ctIntersection, clippedPolygon, pftNonZero, pftNonZero);

	double area_clippedPolygon = Area(clippedPolygon[0]);
	double area_slidingWindow = Area(slidingWindow);
	double overlap = area_clippedPolygon / area_slidingWindow;
	
	
	cout << "Sliding Window:         " << slidingWindow;
	//cout << "Window-Area:          " << area_slidingWindow << endl;
	cout << "Clipped Label-Polygon:  " << clippedPolygon[0];
	//cout << "Overlap-Area:         " << area_clippedPolygon << endl;
	cout << "Overlap-Percentage:     " << overlap << endl << endl;		
	
	return overlap;
}




/// Start the training.  This resets/initializes the model.
void Classifier::startTraining()
{
	
}

/// Add a new training image.
///
/// @param img:  input image
/// @param float: probability-value which specifies if img represents the class 
void Classifier::train(const cv::Mat3b& img, float labelk)   // ClipperLib::Path labelPolygon, cv::Rect slidingWindow)
{	
	ClipperLib::Path labelPolygon;
	labelPolygon << IntPoint(0, 0) << IntPoint(70, 0) << IntPoint(100, 60) << IntPoint(70, 100) << IntPoint(0, 50);	
	//slidingWindow << IntPoint(20, 20) << IntPoint(120, 20) << IntPoint(120, 80) << IntPoint(20, 80);
	cv::Rect slidingWindow = cv::Rect(0, 0, 64, 128);


	//extract slidingWindow out of the image
	cv::Mat3b img2 = img(slidingWindow);
	cout << "Sliding Window:         " << slidingWindow << endl;


	//calculate Feature-Descriptor
	vector<float> vDescriptor;
	HOG->hog.compute(img2, vDescriptor);	
	cv::Mat1f descriptor(1,vDescriptor.size(),&vDescriptor[0]);    
	HOG->descriptors.push_back(descriptor);


	//calculate Label
	ClipperLib::Path slidingWindowPath;
	slidingWindowPath << IntPoint(slidingWindow.x, slidingWindow.y)
			<< IntPoint(slidingWindow.x + slidingWindow.width, slidingWindow.y)
			<< IntPoint(slidingWindow.x + slidingWindow.width, slidingWindow.y + slidingWindow.height)
			<< IntPoint(slidingWindow.x, slidingWindow.y + slidingWindow.height); 
	float label = (float) calculateOverlap(labelPolygon, slidingWindowPath);
	HOG->responses.push_back(cv::Mat1f(1,1,label));
}

/// Finish the training. This finalizes the model. Do not call train() afterwards anymore.
void Classifier::finishTraining()
{
	cv::SVMParams params;
	HOG->svm.train( HOG->descriptors, HOG->responses, cv::Mat(), cv::Mat(), params );
}

/// Classify an unknown test image.  The result is a floating point
/// value directly proportional to the probability of being a person.
///
/// @param img: unknown test image
/// @return:    probability of human likelihood
double Classifier::classify(const cv::Mat3b& img) //
{
	cv::Mat3b img2 = img(cv::Rect((img.cols-64)/2,(img.rows-128)/2,64,128));

	vector<float> vDescriptor;
	HOG->hog.compute(img2, vDescriptor);	
	cv::Mat1f descriptor(1,vDescriptor.size(),&vDescriptor[0]);

	return -1.0 * HOG->svm.predict(descriptor, true);
}

